/*
Project Euler - Problem #2: Even Fibonacci numbers
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
*/
package main

import (
	"fmt"
	"time"
)

// By storing previous values of the fibonacci sequence, we can greatly increase efficiency
func main() {
	start := time.Now()
	fibonacci := make([]int, 0)
	fibonacci = append(fibonacci, 1, 1) // append fib[0] and fib[1]

	var v, sum int
	i := 1
	for v < 4000000 {
		if v%2 == 0 {
			sum += v
		}
		i++
		v = fibonacci[i-1] + fibonacci[i-2]
		fibonacci = append(fibonacci, v)
	}
	fmt.Println(sum)
	fmt.Printf("in %v ns", time.Since(start).Nanoseconds())
}
