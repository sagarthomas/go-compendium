/*
Project Euler - Problem #12: Highly divisible triangular number
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

package main

import (
	"fmt"
	"math"
	"time"
)

/*
Two main optimizations made:
1. Instead of calculating the ith triangular number each time by summing from 1 -> i, we can just
use the answer from 1 - i and add i to it
2. To find all the factors, instead of iterating from 1 -> n and doing trial division for each value,
we can iterate up to sqrt(n); for each i that evenly divides n, we check if i == n/i. If it's not, then we iterate
the factor count twice. Example: 28 % 2 = 0 and 28 / 2 = 14 which is another factor. This way, we
can find around two factors in each iteration we get a hit. (Note: not always the case to count by 2 for each hit
ex. 25 % 5 = 0 and 25 / 5 = 5 so here we would only iterate count by 1)
*/
func main() {
	start := time.Now()
	triangular_numbers := make([]int, 1000) //arbitary array size to start off with
	triangular_numbers[1] = 1

	i := 2
	for {
		triangular_numbers[i] = triangular_numbers[i-1] + i
		if findFactors(triangular_numbers[i]) {
			fmt.Println(triangular_numbers[i])
			fmt.Printf("in %vs\n", time.Since(start).Seconds())
			return
		}
		i++
		if i == cap(triangular_numbers) {
			// grow the slice
			temp := make([]int, len(triangular_numbers)*2, cap(triangular_numbers)*2)
			copy(temp, triangular_numbers)
			triangular_numbers = temp
		}
	}
}

func findFactors(num int) bool {
	count := 0
	for i := 1; i <= int(math.Sqrt(float64(num))); i++ {
		if num%i == 0 {
			count++
			if i != num/i {
				count++
			}
		}
	}
	if count > 500 {
		return true
	}
	return false
}
